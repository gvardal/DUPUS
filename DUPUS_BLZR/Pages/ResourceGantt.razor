@page "/resourcegantt"
@inject IServiceManager _manager


<SfGantt DataSource="@TaskCollection" Height="800px" AllowRowDragAndDrop HighlightWeekends
         Toolbar="@(new List<Object>() { "Add", "Cancel", "Update" , "Delete", "Edit", "CollapseAll", "ExpandAll" })"
         ViewType="ViewType.ResourceView">
    <GanttTaskFields Id="TaskId" Name="TaskName" StartDate="StartDate" Duration="Duration"
                     DurationUnit="DurationUnit" Progress="Progress" ParentID="ParentId" ResourceInfo="Resources"
                     Dependency="Predecessor">
    </GanttTaskFields>
    <GanttColumns>
        <GanttColumn Field="TaskId" Visible="false"></GanttColumn>
        <GanttColumn Field="TaskName" HeaderText="Name" Width="400" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left"></GanttColumn>
        <GanttColumn Field="Progress" Format="P0"></GanttColumn>
        <GanttColumn Field="StartDate" Format="dd.MM.yyyy"></GanttColumn>
        <GanttColumn Field="Duration"></GanttColumn>
    </GanttColumns>
    <GanttResourceFields Group="ResourceGroup" Resources="@ResourceCollection" Id="ResourceId" Name="ResourceName" Unit="ResourceUnit" TResources="ResourceData"></GanttResourceFields>
    <GanttSplitterSettings ColumnIndex="4"></GanttSplitterSettings>
    <GanttLabelSettings RightLabel="Resources" TValue="TaskData"></GanttLabelSettings>
    <GanttEditSettings AllowAdding AllowDeleting AllowEditing AllowTaskbarEditing ShowDeleteConfirmDialog></GanttEditSettings>
</SfGantt>




@code {
    private List<TaskData> TaskCollection = new();

    private List<ResourceData> ResourceCollection = new();

    protected override void OnInitialized()
    {
        this.TaskCollection = GetTasks();
        ResourceCollection = GetResource();
    }

    private List<ResourceData> GetResource()
    {
        ResourceCollection.Clear();
        var result = _manager.KonumService.GanttResourceGroup(21);
        if (result is not null)
        {
            foreach (var rsc in result)
            {
                ResourceCollection.Add(
                    new ResourceData
                        {
                            ResourceId = rsc.KonumID,
                            ResourceName = rsc.Ad,
                            ResourceGroup = rsc.KonumKodu
                        });
            }
        }
        return ResourceCollection;
    }

    private List<TaskData> GetTasks()
    {
        List<TaskData> Tasks = new();
        var result = _manager.IsEmriService.GanttTasks();
        if (result.Count > 0)
        {
            foreach (var task in result)
            {
                Tasks.Add(new TaskData
                    {
                        TaskId = task.TaskId,
                        TaskName = task.TaskName,
                        StartDate = task.StartDate,
                        TaskType = "FixedDuration",
                        Duration = task.Duration,
                        Progress = task.Progress,
                        ParentId = task.ParentId,
                        Resources = task.Resources
                    });
            }

        }
        return Tasks;

    }




}
